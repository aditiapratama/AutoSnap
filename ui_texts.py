import bpy

generated_text_ops = '''
# This file is auto-generated by addon AutoSnap
# http://julienduroure.com/AutoSnap
# for any questions, please ask contact@julienduroure.com
import bpy
import mathutils
import math

autosnap_rig_id = "###rig_id###"

### Warning : any modification on this enum must be reported on live source code
IK_type_items = [
	("POLE", "With Pole", "", 1),
	("ROTATION", "With Rotation", "", 2),
]

### Warning : any modification on this enum must be reported on live source code
scale_type_items = [
	("NONE", "None", "", 1),
	("PARENT", "Parenting", "", 2),
]

### Warning : any modification on this enum must be reported on live source code
location_type_items = [
	("NONE", "None", "", 1),
	("PARENT", "Parenting", "", 2),
]

### Warning : any modification on this PorpertyGroup must be reported on live source code
class BoneItem(bpy.types.PropertyGroup):
	name = bpy.props.StringProperty(name="Bone name")

def get_poll_snapping_op(context):
	return context.active_object and context.active_object.type == "ARMATURE" and context.active_object.data.get("autosnap_rig_id") is not None and context.active_object.data.get("autosnap_rig_id") == autosnap_rig_id and context.mode == 'POSE'

###CLASS_FK2IK###

###CLASS_IK2FK###

def register():
	bpy.utils.register_class(BoneItem)
	bpy.utils.register_class(###CLASS_FK2IK_name###)
	bpy.utils.register_class(###CLASS_IK2FK_name###)
	
def unregister():
	bpy.utils.unregister_class(BoneItem)
	bpy.utils.unregister_class(###CLASS_FK2IK_name###)
	bpy.utils.unregister_class(###CLASS_IK2FK_name###)

register()
'''		

ui_generated_fk2ik_param = '''
###tab###op.root = "###root###"
###tab###op.global_scale = ###global_scale###
###tab###op.ik_scale_type = '###ik_scale_type###'
###tab###op.fk_scale_type = '###fk_scale_type###'
###tab###op.ik_location_type = '###ik_location_type###'
###tab###op.fk_location_type = '###fk_location_type###'
###tab###op.with_limb_end_fk	= ###with_limb_end_fk###
###tab###op.with_limb_end_ik	= ###with_limb_end_ik###

###tab###op.ik1 = "###ik1###"
###tab###op.ik2 = "###ik2###"
###tab###op.ik3 = "###ik3###"
###tab###op.ik5 = "###ik5###"
		
###tab###op.fk1 = "###fk1###"
###tab###op.fk2 = "###fk2###"
###tab###op.fk3 = "###fk3###"
###tab###op.fk4 = "###fk4###"
		
###tab###op.ik_scale = "###ik_scale###"
###tab###op.fk_scale = "###fk_scale###"
###tab###op.ik_location = "###ik_location###"
###tab###op.fk_location = "###fk_location###"
'''

ui_generated_ik2fk_param = '''
###tab###op.root = "###root###"
###tab###op.ik_type = "###ik_type###"
###tab###op.global_scale = ###global_scale###
###tab###op.ik_scale_type = '###ik_scale_type###'
###tab###op.fk_scale_type = '###fk_scale_type###'
###tab###op.ik_location_type = '###ik_location_type###'
###tab###op.fk_location_type = '###fk_location_type###'
###tab###op.with_limb_end_fk	= ###with_limb_end_fk###
###tab###op.with_limb_end_ik	= ###with_limb_end_ik###

###tab###op.ik1 = "###ik1###"
###tab###op.ik2 = "###ik2###"
###tab###op.ik3 = "###ik3###"
###tab###op.ik4 = "###ik4###"
###tab###op.ik5 = "###ik5###"
		
###tab###op.fk1 = "###fk1###"
###tab###op.fk2 = "###fk2###"
###tab###op.fk3 = "###fk3###"
###tab###op.fk4 = "###fk4###"
		
###tab###op.ik_scale = "###ik_scale###"
###tab###op.fk_scale = "###fk_scale###"
###tab###op.ik_location = "###ik_location###"
###tab###op.fk_location = "###fk_location###"

###tab###populate_reinit_bones(op, ###limb_reinit_bones###)
'''

ui_layout_default ='''
		row = layout.row()
		box = row.box()
		row_ = box.row()
		op = row_.operator("pose.limb_fk2ik_###rig_id###", text="###FK2IK_LABEL###")
###GENERATED_FK2IK_PARAM###
		row_ = box.row()
		op = row_.operator("pose.limb_ik2fk_###rig_id###", text="###IK2FK_LABEL###")
###GENERATED_IK2FK_PARAM###
'''

ui_generated_text = '''
# This file is auto-generated by addon AutoSnap
# http://julienduroure.com/AutoSnap
# for any questions, please ask contact@julienduroure.com
import bpy

autosnap_rig_id = "###rig_id###"

def populate_reinit_bones(op, list_):
	for bone in list_:
		item_dst = op.reinit_bones.add()
		item_dst.name = bone

class POSE_PT_BeSpanned_Snap_###rig_id###(bpy.types.Panel):
	bl_label = "###LABEL###"
	bl_space_type = 'VIEW_3D'
	bl_region_type = '###REGION_TYPE###'
	bl_category = "###CATEGORY###"
	
	@classmethod
	def poll(self, context):
		return context.active_object and context.active_object.type == "ARMATURE" and context.active_object.data.get("autosnap_rig_id") is not None and context.active_object.data.get("autosnap_rig_id") == autosnap_rig_id and context.mode == 'POSE'
		
			
	def draw(self, context):
		layout = self.layout
		armature = context.object
		
###LAYOUT###

def register():
	bpy.utils.register_class(POSE_PT_BeSpanned_Snap_###rig_id###)
	
def unregister():
	bpy.utils.unregister_class(POSE_PT_BeSpanned_Snap_###rig_id###)

register()
'''
